{"ast":null,"code":"var _jsxFileName = \"/Users/dusehd1/KMU/3-1/gjb_ft/front/src/components/FoodTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\n\n// 테이블 헤더 정의 (고정)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst headers = [{\n  text: \"사진\",\n  value: \"food_pic\"\n}, {\n  text: \"식품명\",\n  value: \"food_name\"\n}, {\n  text: \"카테고리\",\n  value: \"category\"\n}, {\n  text: \"유통기한\",\n  value: \"expiration_date\"\n}, {\n  text: \"수량\",\n  value: \"item_amount\"\n}];\n\n// 남은 일수 계산하는 함수\nexport const calculateDaysLeft = expirationDate => {\n  const today = new Date();\n  const expireDate = new Date(expirationDate);\n  today.setUTCHours(0, 0, 0, 0); // 현재 날짜 시간을 00:00:00으로 설정\n  expireDate.setUTCHours(0, 0, 0, 0); // 유통기한 날짜 시간 00:00:00으로 설정\n  const remainingTime = Math.ceil((expireDate - today) / (1000 * 60 * 60 * 24)); // 남은 일수 계산\n  return remainingTime;\n};\n\n// FoodTable 컴포넌트 정의\nfunction FoodTable({\n  headers,\n  items,\n  setItems,\n  onDelete,\n  user,\n  sortItems,\n  sortCriteria,\n  sortDirection,\n  setSortCriteria,\n  setSortDirection,\n  setSelectedFoodNames\n}) {\n  _s();\n  const navigate = useNavigate(); // useNavigate 훅 사용\n  const {\n    alert_date\n  } = user; // userInfo로부터 알림 기준 일수 추출\n  const [selection, setSelection] = useState([]); // 선택된 항목들 관리하는 state, food_id 담김\n  const headerKey = headers.map(header => header.value); // 헤더의 value 값 배열로 변환\n\n  // 정렬 함수\n  const handleSort = criteria => {\n    // 현재 정렬 기준과 같은 경우 방향 반대로, 다른 경우는 오름차순으로 설정\n    const newDirection = criteria === sortCriteria ? !sortDirection : true;\n    setSortCriteria(criteria); // 새로운 정렬 기준 설정\n    setSortDirection(newDirection); // 새로운 정렬 방향 설정\n    const sortedItems = sortItems(items, criteria, newDirection); // 정렬된 아이템 리스트 반환\n    setSelection([]); // 정렬 후 선택 상태 초기화\n    return sortedItems; // 정렬된 아이템 반환\n  };\n\n  // 헤더 렌더링 함수 + 정렬 기능\n  const renderHeaderWithSort = () => {\n    return headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n      children: [header.text, header.text === \"식품명\" || header.text === \"카테고리\" || header.text === \"유통기한\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          paddingLeft: \"10px\"\n        },\n        onClick: () => handleSort(header.value),\n        children: items.length === 0 ? \"↕\" : sortCriteria === header.value ? sortDirection ? \"▲\" : \"▼\" : \"↕\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this) : null]\n    }, header.text, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this));\n  };\n  // 삭제 버튼 클릭 시 호출되는 함수\n  const handleDelete = () => {\n    const selectedItems = items.filter(item => selection.includes(item.food_id)); // 선택된 항목만 필터링하여 배열 생성\n    onDelete(selectedItems); // 선택된 항목 삭제\n    setSelection([]); // 선택 상태 초기화\n\n    // 체크박스 선택 해제\n    const checkboxes = document.querySelectorAll('.foodTable tbody input[type=\"checkbox\"]');\n    checkboxes.forEach(checkbox => {\n      checkbox.checked = false;\n    });\n  };\n\n  // FoodTable에 handleDelete 함수 연결\n  FoodTable.handleDelete = handleDelete;\n\n  // 체크박스 선택 상태 변경 함수\n  const onChangeSelect = food_id => {\n    let newSelection;\n    if (selection.includes(food_id)) {\n      newSelection = selection.filter(selected_id => selected_id !== food_id); // 이미 선택된 항목이면 선택 해제\n    } else {\n      newSelection = [...selection, food_id]; // 선택되지 않은 항목이면 선택 추가\n    }\n    setSelection(newSelection); // 선택 상태 업데이트\n    setSelectedFoodNames(newSelection.map(id => items.find(item => item.food_id === id).food_name));\n  };\n\n  // 전체 선택 체크박스 상태 변경 함수\n  const onChangeSelectAll = e => {\n    if (e.target.checked) {\n      const allCheckedSelection = items.map(item => item.food_id); // 모든 아이템의 food_id 배열 추출\n      setSelection(allCheckedSelection); // 전체 선택 상태\n    } else {\n      setSelection([]); // 선택 해제 상태\n    }\n  };\n\n  // 전체 선택 여부 확인 함수\n  const isSelectedAll = () => {\n    return items.length > 0 && selection.length === items.length;\n  };\n\n  // 각 행 클릭 시 상세 페이지로 이동하는 함수\n  const handleRowClick = food_id => {\n    navigate(`/food/${food_id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tableContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"foodTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"tableHeader\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: isSelectedAll(),\n              onChange: onChangeSelectAll\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), renderHeaderWithSort()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: items.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"noItemsRow\",\n          style: {\n            height: \"100%\",\n            border: \"\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: headers.length + 1,\n            style: {\n              border: \"none\",\n              textAlign: \"center\",\n              padding: \"0\",\n              fontSize: \"16px\",\n              height: \"570px\",\n              verticalAlign: \"middle\"\n            },\n            children: \"\\uB4F1\\uB85D\\uB41C \\uC2DD\\uD488\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this) :\n        // 아이템 있는 경우\n        items.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: selection.includes(item.food_id) ? \"select_row\" : \"\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: () => handleRowClick(item.food_id) // 행 클릭 시 상세 페이지로 이동\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            onClick: e => e.stopPropagation(),\n            style: {\n              cursor: \"default\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selection.includes(item.food_id),\n              onChange: e => {\n                onChangeSelect(item.food_id);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this), headerKey.map((key, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              // 알림 기준 일수보다 남은 일수가 적으면 배경색 변경\n              backgroundColor: key === \"expiration_date\" ? calculateDaysLeft(item.expiration_date) <= alert_date ? \"#FFCDCD\" : \"transparent\" : \"transparent\"\n            },\n            children: key === \"food_pic\" ?\n            // 식품 이미지 출력\n            item[key] ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item[key],\n              alt: \"\",\n              style: {\n                width: \"120px\",\n                height: \"100px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 25\n            }, this) :\n            /*#__PURE__*/\n            // 식품 이미지 없는 경우 No Images 출력\n            _jsxDEV(\"div\", {\n              style: {\n                width: \"100%\",\n                height: \"100px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                fontSize: \"15px\"\n              },\n              children: \"No Images\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 25\n            }, this) : key === \"expiration_date\" ?\n            /*#__PURE__*/\n            // 유통기한 관련 정보 출력\n            _jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"expirationDateText\",\n                children: [item[key].split(\"T\")[0], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 25\n              }, this), calculateDaysLeft(item.expiration_date) < 0 &&\n              /*#__PURE__*/\n              // 유통기한 지난 경우\n              _jsxDEV(\"span\", {\n                style: {\n                  color: \"red\"\n                },\n                children: [\"(\\uC720\\uD1B5\\uAE30\\uD55C \\uC9C0\\uB0A8, D+\", Math.abs(calculateDaysLeft(item.expiration_date)), \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 27\n              }, this), calculateDaysLeft(item.expiration_date) >= 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [calculateDaysLeft(item.expiration_date) <= alert_date &&\n                /*#__PURE__*/\n                // 유통기한 안 지났지만 알림 기준 일수보다 남은 일수가 적은 경우\n                _jsxDEV(\"span\", {\n                  style: {\n                    color: \"red\"\n                  },\n                  children: [\" \", \"(D-\", calculateDaysLeft(item.expiration_date), \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 31\n                }, this), calculateDaysLeft(item.expiration_date) > alert_date && /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\" \", \"(D-\", calculateDaysLeft(item.expiration_date), \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 31\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true) : item[key]\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 19\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(FoodTable, \"JnptPOOFgBy3n/VQJxKUNBiAW0c=\", false, function () {\n  return [useNavigate];\n});\n_c = FoodTable;\nexport { headers, FoodTable };\nvar _c;\n$RefreshReg$(_c, \"FoodTable\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","headers","text","value","calculateDaysLeft","expirationDate","today","Date","expireDate","setUTCHours","remainingTime","Math","ceil","FoodTable","items","setItems","onDelete","user","sortItems","sortCriteria","sortDirection","setSortCriteria","setSortDirection","setSelectedFoodNames","_s","navigate","alert_date","selection","setSelection","headerKey","map","header","handleSort","criteria","newDirection","sortedItems","renderHeaderWithSort","children","style","paddingLeft","onClick","length","fileName","_jsxFileName","lineNumber","columnNumber","handleDelete","selectedItems","filter","item","includes","food_id","checkboxes","document","querySelectorAll","forEach","checkbox","checked","onChangeSelect","newSelection","selected_id","id","find","food_name","onChangeSelectAll","e","target","allCheckedSelection","isSelectedAll","handleRowClick","className","type","onChange","height","border","colSpan","textAlign","padding","fontSize","verticalAlign","index","cursor","stopPropagation","key","idx","backgroundColor","expiration_date","src","alt","width","display","alignItems","justifyContent","split","color","abs","_c","$RefreshReg$"],"sources":["/Users/dusehd1/KMU/3-1/gjb_ft/front/src/components/FoodTable.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\n\n// 테이블 헤더 정의 (고정)\nconst headers = [\n  { text: \"사진\", value: \"food_pic\" },\n  { text: \"식품명\", value: \"food_name\" },\n  { text: \"카테고리\", value: \"category\" },\n  { text: \"유통기한\", value: \"expiration_date\" },\n  { text: \"수량\", value: \"item_amount\" },\n];\n\n// 남은 일수 계산하는 함수\nexport const calculateDaysLeft = (expirationDate) => {\n  const today = new Date();\n  const expireDate = new Date(expirationDate);\n  today.setUTCHours(0, 0, 0, 0); // 현재 날짜 시간을 00:00:00으로 설정\n  expireDate.setUTCHours(0, 0, 0, 0); // 유통기한 날짜 시간 00:00:00으로 설정\n  const remainingTime = Math.ceil((expireDate - today) / (1000 * 60 * 60 * 24)); // 남은 일수 계산\n  return remainingTime;\n};\n\n// FoodTable 컴포넌트 정의\nfunction FoodTable({\n  headers,\n  items,\n  setItems,\n  onDelete,\n  user,\n  sortItems,\n  sortCriteria,\n  sortDirection,\n  setSortCriteria,\n  setSortDirection,\n\n  setSelectedFoodNames,\n}) {\n  const navigate = useNavigate(); // useNavigate 훅 사용\n  const { alert_date } = user; // userInfo로부터 알림 기준 일수 추출\n  const [selection, setSelection] = useState([]); // 선택된 항목들 관리하는 state, food_id 담김\n  const headerKey = headers.map((header) => header.value); // 헤더의 value 값 배열로 변환\n\n  // 정렬 함수\n  const handleSort = (criteria) => {\n    // 현재 정렬 기준과 같은 경우 방향 반대로, 다른 경우는 오름차순으로 설정\n    const newDirection = criteria === sortCriteria ? !sortDirection : true;\n    setSortCriteria(criteria); // 새로운 정렬 기준 설정\n    setSortDirection(newDirection); // 새로운 정렬 방향 설정\n    const sortedItems = sortItems(items, criteria, newDirection); // 정렬된 아이템 리스트 반환\n    setSelection([]); // 정렬 후 선택 상태 초기화\n    return sortedItems; // 정렬된 아이템 반환\n  };\n\n  // 헤더 렌더링 함수 + 정렬 기능\n  const renderHeaderWithSort = () => {\n    return headers.map((header) => (\n      <th key={header.text}>\n        {header.text}\n        {/* 정렬 버튼 추가 */}\n        {header.text === \"식품명\" ||\n        header.text === \"카테고리\" ||\n        header.text === \"유통기한\" ? (\n          <button\n            style={{ paddingLeft: \"10px\" }}\n            onClick={() => handleSort(header.value)}\n          >\n            {/* 아이템 없을 때는 항상 ↕ 표시, 아이템 있을 때 정렬 기준에 따라 아이콘 표시 */}\n            {items.length === 0\n              ? \"↕\"\n              : sortCriteria === header.value\n              ? sortDirection\n                ? \"▲\"\n                : \"▼\"\n              : \"↕\"}\n          </button>\n        ) : null}\n      </th>\n    ));\n  };\n  // 삭제 버튼 클릭 시 호출되는 함수\n  const handleDelete = () => {\n    const selectedItems = items.filter((item) =>\n      selection.includes(item.food_id)\n    ); // 선택된 항목만 필터링하여 배열 생성\n    onDelete(selectedItems); // 선택된 항목 삭제\n    setSelection([]); // 선택 상태 초기화\n\n    // 체크박스 선택 해제\n    const checkboxes = document.querySelectorAll(\n      '.foodTable tbody input[type=\"checkbox\"]'\n    );\n    checkboxes.forEach((checkbox) => {\n      checkbox.checked = false;\n    });\n  };\n\n  // FoodTable에 handleDelete 함수 연결\n  FoodTable.handleDelete = handleDelete;\n\n  // 체크박스 선택 상태 변경 함수\n  const onChangeSelect = (food_id) => {\n    let newSelection;\n    if (selection.includes(food_id)) {\n      newSelection = selection.filter((selected_id) => selected_id !== food_id); // 이미 선택된 항목이면 선택 해제\n    } else {\n      newSelection = [...selection, food_id]; // 선택되지 않은 항목이면 선택 추가\n    }\n    setSelection(newSelection); // 선택 상태 업데이트\n    setSelectedFoodNames(\n      newSelection.map(\n        (id) => items.find((item) => item.food_id === id).food_name\n      )\n    );\n  };\n\n  // 전체 선택 체크박스 상태 변경 함수\n  const onChangeSelectAll = (e) => {\n    if (e.target.checked) {\n      const allCheckedSelection = items.map((item) => item.food_id); // 모든 아이템의 food_id 배열 추출\n      setSelection(allCheckedSelection); // 전체 선택 상태\n    } else {\n      setSelection([]); // 선택 해제 상태\n    }\n  };\n\n  // 전체 선택 여부 확인 함수\n  const isSelectedAll = () => {\n    return items.length > 0 && selection.length === items.length;\n  };\n\n  // 각 행 클릭 시 상세 페이지로 이동하는 함수\n  const handleRowClick = (food_id) => {\n    navigate(`/food/${food_id}`);\n  };\n\n  return (\n    <div className=\"tableContainer\">\n      <table className=\"foodTable\">\n        <thead className=\"tableHeader\">\n          <tr>\n            {/* 전체 선택 체크박스 */}\n            <th>\n              <input\n                type=\"checkbox\"\n                checked={isSelectedAll()}\n                onChange={onChangeSelectAll}\n              />\n            </th>\n            {/* 테이블 헤더 출력 */}\n            {renderHeaderWithSort()}\n          </tr>\n        </thead>\n        <tbody>\n          {/* 아이템 없는 경우 화면에 없다고 표시 */}\n          {items.length === 0 ? (\n            <tr className=\"noItemsRow\" style={{ height: \"100%\", border: \"\" }}>\n              <td\n                colSpan={headers.length + 1}\n                style={{\n                  border: \"none\",\n                  textAlign: \"center\",\n                  padding: \"0\",\n                  fontSize: \"16px\",\n                  height: \"570px\",\n                  verticalAlign: \"middle\",\n                }}\n              >\n                등록된 식품이 없습니다.\n              </td>\n            </tr>\n          ) : (\n            // 아이템 있는 경우\n            items.map((item, index) => (\n              <tr\n                key={index}\n                className={selection.includes(item.food_id) ? \"select_row\" : \"\"}\n                style={{ cursor: \"pointer\" }}\n                onClick={() => handleRowClick(item.food_id)} // 행 클릭 시 상세 페이지로 이동\n              >\n                <td\n                  onClick={(e) => e.stopPropagation()}\n                  style={{ cursor: \"default\" }}\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={selection.includes(item.food_id)}\n                    onChange={(e) => {\n                      onChangeSelect(item.food_id);\n                    }}\n                  />\n                </td>\n                {headerKey.map((key, idx) => (\n                  <td\n                    key={idx}\n                    style={{\n                      // 알림 기준 일수보다 남은 일수가 적으면 배경색 변경\n                      backgroundColor:\n                        key === \"expiration_date\"\n                          ? calculateDaysLeft(item.expiration_date) <=\n                            alert_date\n                            ? \"#FFCDCD\"\n                            : \"transparent\"\n                          : \"transparent\",\n                    }}\n                  >\n                    {key === \"food_pic\" ? (\n                      // 식품 이미지 출력\n                      item[key] ? (\n                        <img\n                          src={item[key]}\n                          alt=\"\"\n                          style={{ width: \"120px\", height: \"100px\" }}\n                        />\n                      ) : (\n                        // 식품 이미지 없는 경우 No Images 출력\n                        <div\n                          style={{\n                            width: \"100%\",\n                            height: \"100px\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                            fontSize: \"15px\",\n                          }}\n                        >\n                          No Images\n                        </div>\n                      )\n                    ) : key === \"expiration_date\" ? (\n                      // 유통기한 관련 정보 출력\n                      <>\n                        <span className=\"expirationDateText\">\n                          {item[key].split(\"T\")[0]} {/* 날짜만 표시 */}\n                          <br />\n                        </span>\n                        {calculateDaysLeft(item.expiration_date) < 0 && (\n                          // 유통기한 지난 경우\n                          <span style={{ color: \"red\" }}>\n                            (유통기한 지남, D+\n                            {Math.abs(calculateDaysLeft(item.expiration_date))})\n                          </span>\n                        )}\n                        {calculateDaysLeft(item.expiration_date) >= 0 && (\n                          <>\n                            {calculateDaysLeft(item.expiration_date) <=\n                              alert_date && (\n                              // 유통기한 안 지났지만 알림 기준 일수보다 남은 일수가 적은 경우\n                              <span style={{ color: \"red\" }}>\n                                {\" \"}\n                                (D-{calculateDaysLeft(item.expiration_date)})\n                              </span>\n                            )}\n                            {calculateDaysLeft(item.expiration_date) >\n                              alert_date && (\n                              <span>\n                                {\" \"}\n                                (D-{calculateDaysLeft(item.expiration_date)})\n                              </span>\n                            )}\n                          </>\n                        )}\n                      </>\n                    ) : (\n                      item[key]\n                    )}\n                  </td>\n                ))}\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport { headers, FoodTable };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}